<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>saveModifiedFiles</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby18

# TODO: Print stylesheet

if RUBY_VERSION =~ /^1\.6\./ then
  puts &lt;&lt;-HTML
&lt;p&gt;Sorry, but this function requires Ruby 1.8.&lt;/p&gt;
&lt;p&gt;If you do have Ruby 1.8 installed (default for Tiger users) then you need to setup the path variable in &lt;tt&gt; ~/.MacOSX/environment.plist&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;For detailed instructions see &lt;a href="http://macromates.com/textmate/manual/shell_commands#search_path"&gt;the manual&lt;/a&gt; (scroll down to the paragraph starting with &lt;em&gt;Important&lt;/em&gt;.)&lt;/p&gt;
HTML
  abort
end

require "#{ENV['TM_SUPPORT_PATH']}/lib/web_preview"

if ARGV.size &gt; 0
  if ARGV[0] == 'dir'
    ENV['TM_SELECTED_FILES'] = ""
    ENV['TM_PROJECT_DIRECTORY'] = File.dirname ENV['TM_FILEPATH']
  elsif ARGV[0] == 'project'
    ENV['TM_SELECTED_FILES'] = ""
  end
end

if ENV['TM_PROJECT_DIRECTORY'] == '/'
  puts html_head(:window_title =&gt; "TODO", :page_title =&gt; "TODO List", :sub_title =&gt; "Error")
  puts &lt;&lt;-HTML
&lt;p&gt;Warning: Your project directory is the root directory!&lt;/p&gt;
&lt;p&gt;This is problably because you have symbolic links or file references inside your project so that the most common directory of all the files in the project resolves to `/` (root).&lt;/p&gt;
&lt;p&gt;Aborting.&lt;/p&gt;
HTML
  abort
end

require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/settings.rb"
require "#{ENV['TM_SUPPORT_PATH']}/lib/textmate"
require "erb"
require "yaml"
include ERB::Util

tags = Settings.markers.map { |marker|
  { :label =&gt; marker.name,
    :color =&gt; marker.has_color? ? marker.color : '#808080',
    :regexp =&gt; marker.regexp,
    :trim_if_empty =&gt; marker.trim?
  }
}
ignores = ENV['TM_TODO_IGNORE']

def TextMate.file_link (file, line = 0)
  return "txmt://open/?url=file://" +
    file.gsub(/([^a-zA-Z0-9.-\/]+)/) { '%' + $1.unpack('H2' * $1.size).join('%').upcase } +
    "&amp;amp;line=" + line.to_s
end

tags.each do |tag|
  tag[:matches] = []
  tag[:rendered] = ''
end

html_head = ERB.new(File.read("#{ENV['TM_BUNDLE_SUPPORT']}/template_html_header.rhtml"), 0, '&lt;&gt;').result(binding)

puts html_head(:window_title =&gt; "TODO", :page_title =&gt; "TODO List", :sub_title =&gt; ENV['TM_PROJECT_DIRECTORY'], :html_head =&gt; html_head)

puts ERB.new(File.read("#{ENV['TM_BUNDLE_SUPPORT']}/template_head.rhtml"), 0, '&lt;&gt;').result(binding)

STDOUT.flush

project_dir = ENV['TM_PROJECT_DIRECTORY'] || ""
home_dir = /^#{Regexp.escape ENV['HOME']}/
total = 0
TextMate.each_text_file do |file|
  next if (ignores != nil and file =~ /#{ignores}/) or File.symlink?(file)
  file_name = file.sub(home_dir, '~')
  puts ERB.new(File.read("#{ENV['TM_BUNDLE_SUPPORT']}/template_update_dir.rhtml"), 0, '&lt;&gt;').result(binding)
  tags.each do |tag|
    File.open(file) do |io|
      io.grep(tag[:regexp]) do |content|
        match = {
          :file =&gt; file,
          :line =&gt; io.lineno,
          :content =&gt; content,
          :type =&gt; tag[:label],
          :rendered =&gt; '',
          :index =&gt; tag[:matches].length
        }

        part = $1 or next

        if tag[:label] == "RADAR" &amp;&amp; $~.captures.count == 3 then
          url, display = (ENV['TM_RDAR_URL'] || "http://openradar.appspot.com/") + $2, "rdar://" + $2
          match[:match] = html_escape($1) + "&lt;a href=\"" + url + "\" target=\"_blank\"&gt;" + html_escape(display) + "&lt;/a&gt;" + html_escape($3)
        else
          match[:match] = html_escape(part)
        end
        match[:clean] = part.gsub(/\s+/, " ").gsub(/[^\w@`~!@#\$%\^&amp;*\(\)-=+\[\]|\\\'\"\{\}&lt;&gt;,.\/\? ]/i, "")

        tag[:matches] &lt;&lt; match
        count = tag[:matches].length
        total += 1
        puts ERB.new(File.read("#{ENV['TM_BUNDLE_SUPPORT']}/template_update.rhtml"), 0, '&lt;&gt;').result(binding)
        match[:rendered] = ERB.new(File.read("#{ENV['TM_BUNDLE_SUPPORT']}/template_item.rhtml"), 0, '&lt;&gt;').result binding
        tag[:rendered] += match[:rendered]
        STDOUT.flush
      end
    end if File.readable?(file)
  end
end

tmpl_file = "#{ENV['TM_BUNDLE_SUPPORT']}/template_tail.rhtml"
puts ERB.new(File.read(tmpl_file), 0, '&lt;&gt;').result(binding)

html_footer()
</string>
	<key>input</key>
	<string>none</string>
	<key>keyEquivalent</key>
	<string>^T</string>
	<key>name</key>
	<string>Show TODO List</string>
	<key>output</key>
	<string>showAsHTML</string>
	<key>uuid</key>
	<string>14C1643E-7D51-11D9-859D-000D93B6E43C</string>
</dict>
</plist>
